plugins {
    id 'com.android.library'
//    id 'kotlin-android'
    id 'com.google.protobuf' version '0.9.2'
}

ext {
    kotlin_version = '1.6.21'
    roomVersion = '2.2.3'
    archLifecycleVersion = '2.2.0-rc03'
    coreTestingVersion = '2.1.0'
    kotlinVersion = '1.6.21'
}

android {
    namespace "com.augmentos.smartglassesmanager"
    compileSdk 33

//    aaptOptions {
//        noCompress "tflite"
//    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1,DEPENDENCIES}'
            excludes += '/META-INF/INDEX.LIST'
        }
    }

    defaultConfig {
        minSdk 28
        targetSdk 32
        versionCode 3
        versionName "0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        ndk {
//            abiFilters 'armeabi-v7a', 'arm64-v8a'
//        }

    }

    externalNativeBuild {
        cmake {
            '-DANDROID_STL=c++_static'
        }
    }

//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
////        debug {
////            applicationIdSuffix ".debug" //so we can have both release and debug on the same phone
////        }
//    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }
//
//    sourceSets {
//        main {
//            assets.srcDirs += "$buildDir/generated/assets"
//            java.srcDirs += 'src/main/java'
//            proto.srcDirs += 'src/main/proto'
//        }
//    }
//
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/liblc3/CMakeLists.txt')
            version '3.22.1'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'androidx.navigation:navigation-fragment:2.2.0'
    implementation 'androidx.navigation:navigation-ui:2.2.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    implementation 'com.google.protobuf:protobuf-java:3.21.12'
    implementation 'com.google.protobuf:protobuf-java-util:3.21.12'
    implementation 'com.google.api.grpc:grpc-google-cloud-speech-v1p1beta1:2.6.0'
    implementation "androidx.concurrent:concurrent-futures:1.0.0-alpha03"
    implementation "androidx.lifecycle:lifecycle-common:2.2.0"
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'joda-time:joda-time:2.12.2'
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.0"
    implementation "androidx.core:core:1.1.0-rc03"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation 'io.grpc:grpc-okhttp:1.53.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0-beta02"
    implementation "com.github.bumptech.glide:glide:4.11.0"
    implementation "com.google.android.material:material:1.6.0-alpha01"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.google.flogger:flogger-system-backend:0.3.1"
    implementation "com.google.flogger:flogger:0.3.1"
    implementation "com.google.guava:listenablefuture:1.0"
    implementation "junit:junit:4.12"
    implementation "org.hamcrest:hamcrest-library:1.3"

    implementation 'com.squareup.picasso:picasso:2.8'

    implementation "org.java-websocket:Java-WebSocket:1.5.2"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "io.reactivex.rxjava3:rxjava:3.0.0"
    implementation "com.google.android.gms:play-services-tasks:18.0.0"
    implementation "com.google.android.gms:play-services-location:18.0.0"
    implementation "com.google.code.gson:gson:2.8.6"

    //ROOM
    // Room components
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion"
    implementation "com.google.guava:guava:28.1-android"

    //VOSK ASR
    implementation 'net.java.dev.jna:jna:5.8.0@aar'

    //java.util.time backport
    implementation "org.threeten:threetenbp:1.5.2"

    //http(s) lib
    implementation "com.android.volley:volley:1.2.1"

    //EventBus, greenrobot
    implementation("org.greenrobot:eventbus:3.3.1")

    //activelook SDK
    //implementation 'com.github.activelook:android-sdk:v4.4.0'

    //Json (de/)serialization
    implementation 'com.google.code.gson:gson:2.10.1'

    //for VAD (using Silero DNN)
    implementation 'com.github.gkonovalov:android-vad:2.0.9'
    //implementation 'com.microsoft.onnxruntime:onnxruntime-android:1.15.0'

    //Vuzix Ultralite OEM Platform / Vuzix Z100
    implementation 'com.vuzix:ultralite-sdk-android:1.8'

    //Azure ASR
    // implementation "com.microsoft.cognitiveservices.speech:client-sdk:1.42.0"

    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    implementation project(path: ':AugmentOSLib')
}

//VOSK ASR prep models - need one for each language
//tasks.register('genUUID_en') {
//    def uuid = UUID.randomUUID().toString()
//    def odir = file("$buildDir/generated/assets/model-en-us")
//    def ofile = file("$odir/uuid")
//    doLast {
//        mkdir odir
//        ofile.text = uuid
//    }
//}
//tasks.register('genUUID_fr') {
//    def uuid = UUID.randomUUID().toString()
//    def odir = file("$buildDir/generated/assets/model-fr-small")
//    def ofile = file("$odir/uuid")
//    doLast {
//        mkdir odir
//        ofile.text = uuid
//    }
//}
//
//preBuild.dependsOn(genUUID_en)
//preBuild.dependsOn(genUUID_fr)

protobuf {
    protoc {
        // use this compiler, from the maven repo (instead of a local file, for instance)
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }
    generateProtoTasks {
        all().configureEach { task ->
            // remove the default java output
            task.builtins {
                remove java
            }
            // add the java output with lite runtime
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
